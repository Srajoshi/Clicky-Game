{"ast":null,"code":"import _classCallCheck from \"/Users/seema/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/seema/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/seema/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/seema/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/seema/Desktop/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/seema/Desktop/clicky-game/src/App.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport Navbar from \"./Components/NavBar\";\nimport Wrapper from \"./Components/Wrapper\";\nimport FriendCard from \"./Components/FriendCard\";\nimport friends from \"./friends.json\";\nimport Footer from \"./Components/Footer\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      clickedCardIds: [],\n      score: 0,\n      topScore: 0,\n      navBarText: \"Click on an image to earn points, but don't click on the same image twice!\"\n    };\n\n    _this.clickedFriend = function (id) {\n      var clickedCardIds = _this.state.clickedCardIds;\n\n      if (clickedCardIds.includes(id)) {\n        _this.setState({\n          clickedCardIds: [],\n          navBarText: \"Game Over! You lost. Click to play again!\",\n          score: 0\n        });\n\n        return;\n      } else {\n        clickedCardIds.push(id);\n\n        _this.setState({\n          score: _this.state.score + 1\n        });\n\n        if (_this.state.score >= _this.state.topScore) {\n          _this.setState({\n            topScore: _this.state.score + 1\n          });\n        }\n\n        if (_this.state.score === 12) {\n          _this.setState({\n            score: 0,\n            navBarText: \"You Won! Click to play again!\",\n            clickedCardIds: [],\n            friends: friends\n          });\n\n          console.log('You Win');\n          return;\n        }\n\n        _this.setState({\n          navBarText: \" \"\n        });\n      }\n    };\n\n    _this.reArrangeCards = function (array) {\n      var currentIndex = array.length;\n\n      while (0 !== currentIndex) {\n        // Pick an element\n        var randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        var temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      _this.setState({\n        friends: friends\n      });\n    };\n\n    _this.renderCards = function (array) {\n      return _this.state.friends.map(function (friend) {\n        return React.createElement(\"section\", {\n          className: \"col s4 l3\",\n          key: friend.id,\n          id: friend.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(Wrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(FriendCard, {\n          name: friend.name,\n          image: friend.image,\n          reArrangeCards: function reArrangeCards() {\n            _this.reArrangeCards(_this.state.friends);\n          },\n          clickedFriend: function clickedFriend() {\n            _this.clickedFriend(friend.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        })));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        text: this.state.navBarText,\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container row cardWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.renderCards(this.state.cards)), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    } // render() {\n    //   return (\n    //     friends.map((friend) => {\n    //       return (\n    //         <Wrapper>\n    //           <FriendCard\n    //             key={friend.id}\n    //             name={friend.name}\n    //             image={friend.image}\n    //           /></Wrapper>\n    //       )\n    //     })\n    //   );\n    // }\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/seema/Desktop/clicky-game/src/App.js"],"names":["React","Component","Navbar","Wrapper","FriendCard","friends","Footer","App","state","clickedCardIds","score","topScore","navBarText","clickedFriend","id","includes","setState","push","console","log","reArrangeCards","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","renderCards","map","friend","name","image","cards"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Navbar from \"./Components/NavBar\";\nimport Wrapper from \"./Components/Wrapper\";\nimport FriendCard from \"./Components/FriendCard\";\nimport friends from \"./friends.json\";\nimport Footer from \"./Components/Footer\";\n\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    friends: friends,\n    clickedCardIds: [],\n    score: 0,\n    topScore: 0,\n    navBarText: \"Click on an image to earn points, but don't click on the same image twice!\"\n  };\n\n  //shuffle the pup cards in the browser when clicked\n  clickedFriend = (id) => {\n    let clickedCardIds = this.state.clickedCardIds;\n\n    if (clickedCardIds.includes(id)) {\n      this.setState({ clickedCardIds: [], navBarText: \"Game Over! You lost. Click to play again!\", score: 0});\n      return;\n    } else {\n      clickedCardIds.push(id)\n      this.setState({score: this.state.score + 1})\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1})\n      }\n\n\n      if (this.state.score === 12) {\n        this.setState({ score: 0, navBarText: \"You Won! Click to play again!\", clickedCardIds: [], friends: friends});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({navBarText: \" \" });\n\n    }\n  }\n\n  // Shuffle Cards: Used randomize array function\n\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick an element\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ friends: friends });\n\n  }\n\n  renderCards = (array) => {\n    return this.state.friends.map(friend => (\n      <section className=\"col s4 l3\" key={friend.id} id={friend.id}>\n        <Wrapper>\n          <FriendCard\n            name={friend.name}\n            image={friend.image}\n            reArrangeCards={() => { this.reArrangeCards(this.state.friends) }}\n            clickedFriend={() => { this.clickedFriend(friend.id) }} />\n        </Wrapper>\n      </section>\n    )\n    )\n  }\n\n      render() {\n        return (\n          <div className=\"container-fluid\">\n            <Navbar text={this.state.navBarText} score={this.state.score} topScore={this.state.topScore}/>\n            <br />\n            <div className=\"container row cardWrapper\">\n              {this.renderCards(this.state.cards)}\n            </div>\n            <Footer/>\n          </div>\n        );\n      }\n\n  // render() {\n          //   return (\n          //     friends.map((friend) => {\n          //       return (\n          //         <Wrapper>\n          //           <FriendCard\n          //             key={friend.id}\n          //             name={friend.name}\n          //             image={friend.image}\n          //           /></Wrapper>\n\n          //       )\n          //     })\n\n          //   );\n          // }\n        }\n\n        export default App;\n"]},"metadata":{},"sourceType":"module"}