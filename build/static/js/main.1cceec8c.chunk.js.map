{"version":3,"sources":["Components/NavBar/NavBar.js","Components/Wrapper/Wrapper.js","Components/FriendCard/FriendCard.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","nav-item","score","topScore","text","Wrapper","children","FriendCard","alt","name","src","image","id","onClick","reArrangeCards","clickedFriend","handleClick","Footer","App","state","friends","clickedCardIds","navBarText","_this","includes","push","setState","console","log","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","renderCards","map","friend","key","Components_Wrapper_Wrapper","Components_FriendCard_FriendCard","NavBar_NavBar","this","cards","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cceec8c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\n\n\nfunction Navbar(props) {\n  return (\n\n    // <form className=\"d-inline-block\">\n    <nav className=\"nav container navbar-fixed bg-primary\">\n      <ul className=\"navbar ml-3\">\n        <li className= \"nav-item\"><h2 className=\"text-align-left\">Clicky Game </h2></li>\n        </ul>\n        <ul className=\"navbar mr-auto\">\n        {/* <li className=\"message\" ><h5 className=\"center message\"> {props.text}</h5></li> */}\n        <li nav-item ><h4 className=\"scores\">Score: {props.score} | </h4></li>\n        <li nav-item ><h4 className=\"scores\">Top Score: {props.topScore} |</h4></li>\n        <li className=\"message mr-auto\" ><h5 className=\"message\"> {props.text}</h5></li>\n      </ul>\n    </nav >\n    //   </form>\n\n  )\n}\n\n\n\nexport default Navbar;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./FriendCard.css\";\n\n\nfunction handleClick(props) {\n  props.reArrangeCards();\n  props.clickedFriend(props.id);\n}\n\n function FriendCard (props) {\n  return (\n\n    <div className=\"card\">\n      <div className=\"img-container imageBox\">\n        <img\n          alt={props.name}\n          src={props.image}\n          id={props.id}\n          onClick={() => handleClick(props)} />\n    </div>\n      {/* <div className=\"name\">\n      <strong>Name:</strong> {props.name}\n    </div> */}\n    </div>\n  )\n}\nexport default FriendCard;","import React from \"react\";\n\nfunction Footer(props) {\n  return (\n    <footer className=\"page-footer bg-primary\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h5 className=\"center white-text footer-update\">{props.text}</h5>\n        </div>\n      </div>\n      <div className=\"footer-copyright\">\n        <div className=\"container text-center\">\n        Â© 2017 Clicky Game by Seema Joshi\n        </div>\n      </div>\n    </footer>\n  )\n}\n\n\n\n\nexport default Footer;","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Navbar from \"./Components/NavBar\";\nimport Wrapper from \"./Components/Wrapper\";\nimport FriendCard from \"./Components/FriendCard\";\nimport friends from \"./friends.json\";\nimport Footer from \"./Components/Footer\";\n\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    friends: friends,\n    clickedCardIds: [],\n    score: 0,\n    topScore: 0,\n    navBarText: \"Click on an image to earn points, but don't click on the same image twice!\"\n  };\n\n  //shuffle the pup cards in the browser when clicked\n  clickedFriend = (id) => {\n    let clickedCardIds = this.state.clickedCardIds;\n\n    if (clickedCardIds.includes(id)) {\n      this.setState({ clickedCardIds: [], navBarText: \"Game Over! You lost. Click to play again!\", score: 0});\n      return;\n    } else {\n      clickedCardIds.push(id)\n      this.setState({score: this.state.score + 1})\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1})\n      }\n\n\n      if (this.state.score === 12) {\n        this.setState({ score: 0, navBarText: \"You Won! Click to play again!\", clickedCardIds: [], friends: friends});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({navBarText: \" \" });\n\n    }\n  }\n\n  // Shuffle Cards: Used randomize array function\n\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick an element\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ friends: friends });\n\n  }\n\n  renderCards = (array) => {\n    return this.state.friends.map(friend => (\n      <section className=\"col s4 m3 l3\" key={friend.id} id={friend.id}>\n        <Wrapper>\n          <FriendCard\n            name={friend.name}\n            image={friend.image}\n            reArrangeCards={() => { this.reArrangeCards(this.state.friends) }}\n            clickedFriend={() => { this.clickedFriend(friend.id) }} />\n        </Wrapper>\n      </section>\n    )\n    )\n  }\n\n      render() {\n        return (\n          <div className=\"container-fluid\">\n            <Navbar text={this.state.navBarText} score={this.state.score} topScore={this.state.topScore}/>\n            <br />\n            <div className=\"container row cardWrapper\">\n              {this.renderCards(this.state.cards)}\n            </div>\n            <Footer/>\n          </div>\n        );\n      }\n\n  // render() {\n          //   return (\n          //     friends.map((friend) => {\n          //       return (\n          //         <Wrapper>\n          //           <FriendCard\n          //             key={friend.id}\n          //             name={friend.name}\n          //             image={friend.image}\n          //           /></Wrapper>\n\n          //       )\n          //     })\n\n          //   );\n          // }\n        }\n\n        export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}